ÔøΩ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê                                                                                                                                                                                                                                
‚ùå ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {"error":{"root_cause":[{"type":"runtime_exception","reason":"Line [34]: Invalid escaped char in [\\]"}],"type":"runtime_exception","reason":"Line [34]: Invalid escaped char in [\\]"},"status":500}                  
ÔøΩ /var/www/www-root/data/site/vdestor.ru/index_opensearch_v4.php:174 

<?php
/**
 * üöÄ –ò–ù–î–ï–ö–°–ê–¢–û–† OPENSEARCH v5.0 - –¢–û–õ–¨–ö–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï
 * 
 * –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö:
 * - –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞—Ä—Ç–∏–∫—É–ª, SKU)
 * - –ë—Ä–µ–Ω–¥—ã –∏ —Å–µ—Ä–∏–∏
 * - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
 * - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
 * 
 * –ù–ï –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç:
 * - –¶–µ–Ω—ã (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞)
 * - –û—Å—Ç–∞—Ç–∫–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º/—Å–∫–ª–∞–¥–∞–º)
 */

require __DIR__ . '/vendor/autoload.php';

use OpenSearch\ClientBuilder;
use App\Core\Database;
use App\Core\Config;

// üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BATCH_SIZE = 1000;
const MEMORY_LIMIT = '4G'; // –£–º–µ–Ω—å—à–∏–ª–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
const MAX_EXECUTION_TIME = 3600;
const MAX_OLD_INDICES = 2;

class StaticProductIndexer {
    private $client;
    private $pdo;
    private $processed = 0;
    private $errors = 0;
    private $startTime;
    private $newIndexName;
    private $totalProducts = 0;

    public function __construct() {
        $this->startTime = microtime(true);
        $this->newIndexName = 'products_' . date('Y_m_d_H_i_s');
        
        ini_set('memory_limit', MEMORY_LIMIT);
        ini_set('max_execution_time', MAX_EXECUTION_TIME);
        set_time_limit(0);
        
        echo $this->getHeader();
    }

    /**
     * üéØ –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
     */
    public function run(): void {
        try {
            $this->initializeConnections();
            $this->analyzeCurrentState();
            $this->createNewIndex();
            $this->indexAllProducts();
            $this->switchAlias();
            $this->cleanupOldIndices();
            $this->showFinalReport();
        } catch (Throwable $e) {
            $this->handleError($e);
        }
    }
    
    private function getTotalStock(int $productId): int {
        $stmt = $this->pdo->prepare("
            SELECT COALESCE(SUM(quantity - reserved), 0) 
            FROM stock_balances 
            WHERE product_id = ? AND quantity > reserved
        ");
        $stmt->execute([$productId]);
        return (int)$stmt->fetchColumn();
    }
    
    private function getCitiesWithStock(int $productId): array {
        $stmt = $this->pdo->prepare("
            SELECT DISTINCT c.city_id
            FROM stock_balances sb
            JOIN city_warehouse_mapping cwm ON sb.warehouse_id = cwm.warehouse_id
            JOIN cities c ON cwm.city_id = c.city_id
            WHERE sb.product_id = ? AND sb.quantity > sb.reserved
        ");
        $stmt->execute([$productId]);
        return $stmt->fetchAll(PDO::FETCH_COLUMN);
    }
    
    private function hasAnyStock(int $productId): bool {
        $total = $this->getTotalStock($productId);
        return $total > 0;
    }
    
    

    /**
     * üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private function initializeConnections(): void {
        echo "üîå === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===\n\n";
        
        // OpenSearch
        try {
            $this->client = ClientBuilder::create()
                ->setHosts(['localhost:9200'])
                ->setRetries(3)
                ->build();
                
            $info = $this->client->info();
            echo "‚úÖ OpenSearch –ø–æ–¥–∫–ª—é—á–µ–Ω: v" . $info['version']['number'] . "\n";
            
            $health = $this->client->cluster()->health();
            echo "üìä –°—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞: {$health['status']}\n";
            
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ OpenSearch: " . $e->getMessage());
        }

        // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        try {
            $this->pdo = Database::getConnection();
            echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\n";
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ –ë–î: " . $e->getMessage());
        }
    }

    /**
     * üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    private function analyzeCurrentState(): void {
        echo "üìä === –ê–ù–ê–õ–ò–ó ===\n\n";
        
        // –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
        $this->totalProducts = $this->pdo->query("SELECT COUNT(*) FROM products")->fetchColumn();
        echo "üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {$this->totalProducts}\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $brands = $this->pdo->query("SELECT COUNT(DISTINCT brand_id) FROM products WHERE brand_id IS NOT NULL")->fetchColumn();
        $series = $this->pdo->query("SELECT COUNT(DISTINCT series_id) FROM products WHERE series_id IS NOT NULL")->fetchColumn();
        $categories = $this->pdo->query("SELECT COUNT(*) FROM product_categories")->fetchColumn();
        $images = $this->pdo->query("SELECT COUNT(DISTINCT product_id) FROM product_images")->fetchColumn();
        
        echo "üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $brands\n";
        echo "üìö –°–µ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $series\n";
        echo "üìÅ –°–≤—è–∑–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: $categories\n";
        echo "üñºÔ∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: $images\n\n";
    }

    /**
     * üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
     */
    private function createNewIndex(): void {
        echo "üìù === –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–ê ===\n\n";
        echo "üÜï –ò–º—è –∏–Ω–¥–µ–∫—Å–∞: {$this->newIndexName}\n";
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        $configFile = __DIR__ . '/opensearch_mappings/products_v5.json';
        if (!file_exists($configFile)) {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            $config = $this->getIndexConfiguration();
            file_put_contents($configFile, json_encode($config, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            echo "üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $configFile\n";
        } else {
            $config = json_decode(file_get_contents($configFile), true);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        try {
            $this->client->indices()->create([
                'index' => $this->newIndexName,
                'body' => $config
            ]);
            echo "‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω\n\n";
        } catch (Exception $e) {
            throw new Exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: " . $e->getMessage());
        }
    }

    /**
     * üì¶ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function indexAllProducts(): void {
        echo "üì¶ === –ò–ù–î–ï–ö–°–ê–¶–ò–Ø ===\n\n";
        echo "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é {$this->totalProducts} —Ç–æ–≤–∞—Ä–æ–≤...\n";
        echo "üìä –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: " . BATCH_SIZE . "\n\n";
        
        $offset = 0;
        $progressBar = $this->initProgressBar();
        
        while ($offset < $this->totalProducts) {
            $products = $this->fetchProductBatch($offset);
            if (empty($products)) break;
            
            $this->indexBatch($products);
            
            $offset += BATCH_SIZE;
            $this->updateProgress($offset);
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
            if ($offset % 10000 === 0) {
                gc_collect_cycles();
            }
        }
        
        echo "\n‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n";
    }

    /**
     * üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function fetchProductBatch(int $offset): array {
        $sql = "
            SELECT 
                p.product_id,
                p.external_id,
                p.sku,
                p.name,
                p.description,
                p.unit,
                p.min_sale,
                p.weight,
                p.dimensions,
                p.created_at,
                p.updated_at,
                p.brand_id,
                p.series_id,
                b.name as brand_name,
                s.name as series_name
            FROM products p
            LEFT JOIN brands b ON p.brand_id = b.brand_id
            LEFT JOIN series s ON p.series_id = s.series_id
            ORDER BY p.product_id
            LIMIT :limit OFFSET :offset
        ";
        
        $stmt = $this->pdo->prepare($sql);
        $stmt->bindValue(':limit', BATCH_SIZE, PDO::PARAM_INT);
        $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
        $stmt->execute();
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * üì§ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞
     */
    private function indexBatch(array $products): void {
        $bulkData = [];
        
        foreach ($products as $product) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            $product['categories'] = $this->getProductCategories($product['product_id']);
            $product['images'] = $this->getProductImages($product['product_id']);
            $product['attributes'] = $this->getProductAttributes($product['product_id']);
            $product['documents'] = $this->getProductDocuments($product['product_id']);
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            $doc = $this->prepareDocument($product);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ bulk
            $bulkData[] = ['index' => ['_index' => $this->newIndexName, '_id' => $product['product_id']]];
            $bulkData[] = $doc;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenSearch
        if (!empty($bulkData)) {
            try {
                $response = $this->client->bulk(['body' => $bulkData]);
                $this->processed += count($products);
                
                if ($response['errors']) {
                    $this->handleBulkErrors($response['items']);
                }
            } catch (Exception $e) {
                $this->errors += count($products);
                error_log("Bulk error: " . $e->getMessage());
            }
        }
    }

    /**
     * üî® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
     */
    private function prepareDocument(array $product): array {
        // üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –î–û —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        $numericProps = [];
        if (!empty($product['attributes'])) {
            foreach ($product['attributes'] as $attr) {
                if (preg_match('/^([\d\.,]+)\s*([–∞-—è–ê-–ØA-Za-z]*)/', $attr['value'], $matches)) {
                    $numericProps[] = [
                        'name' => $attr['name'],
                        'value' => (float) str_replace(',', '.', $matches[1]),
                        'unit' => $matches[2] ?: $attr['unit']
                    ];
                }
            }
        }
        
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        $doc = [
            'product_id' => (int)$product['product_id'],
            'external_id' => $this->normalizeText($product['external_id']),
            'sku' => $this->normalizeText($product['sku']),
            'name' => $this->normalizeText($product['name']),
            'description' => $this->normalizeText($product['description']),
            
            // üéØ –ü–æ–ª—è –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            'search_name_exact' => $product['name'], // –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            'search_code_exact' => $product['external_id'], // –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
            
            // –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            'numeric_props' => $numericProps,
            
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è...
            'brand_name' => $this->normalizeText($product['brand_name']),
            'categories' => $product['categories']['names'] ?? [],
            'category_ids' => $product['categories']['ids'] ?? [],
            'images' => $product['images'],
            'attributes' => $product['attributes'],
            'documents' => $product['documents'],
            
            // –ú–µ—Ç—Ä–∏–∫–∏
            'popularity_score' => $this->getPopularityScore($product['product_id']),
            'total_stock' => $this->getTotalStock($product['product_id']),
            'cities_available' => $this->getCitiesWithStock($product['product_id']),
            'has_stock' => $this->hasAnyStock($product['product_id']),
            
            // –§–ª–∞–≥–∏
            'has_images' => !empty($product['images']),
            'has_description' => !empty($product['description']),
            
            // –ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            'search_text' => $this->buildSearchText($product),
            'suggest' => $this->buildSuggestData($product),
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            'created_at' => $this->formatDate($product['created_at']),
            'updated_at' => $this->formatDate($product['updated_at'])
        ];
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return array_filter($doc, function($value) {
            return $value !== null && $value !== '' && $value !== [];
        });
    }

    /**
     * üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–∞
     */
    private function getProductCategories(int $productId): array {
        $stmt = $this->pdo->prepare("
            SELECT c.category_id, c.name
            FROM product_categories pc
            JOIN categories c ON pc.category_id = c.category_id
            WHERE pc.product_id = ?
        ");
        $stmt->execute([$productId]);
        
        $ids = [];
        $names = [];
        
        while ($row = $stmt->fetch()) {
            $ids[] = (int)$row['category_id'];
            $names[] = $row['name'];
        }
        
        return ['ids' => $ids, 'names' => $names];
    }

    /**
     * üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
     */
    private function getProductImages(int $productId): array {
        $stmt = $this->pdo->prepare("
            SELECT url, alt_text, is_main
            FROM product_images
            WHERE product_id = ?
            ORDER BY is_main DESC, sort_order ASC
        ");
        $stmt->execute([$productId]);
        
        $images = [];
        while ($row = $stmt->fetch()) {
            $images[] = $row['url'];
        }
        
        return $images;
    }

    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
     */
    private function getProductAttributes(int $productId): array {
        $stmt = $this->pdo->prepare("
            SELECT name, value, unit
            FROM product_attributes
            WHERE product_id = ?
            ORDER BY sort_order
        ");
        $stmt->execute([$productId]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
     */
    private function getProductDocuments(int $productId): array {
        $stmt = $this->pdo->prepare("
            SELECT type, COUNT(*) as count
            FROM product_documents
            WHERE product_id = ?
            GROUP BY type
        ");
        $stmt->execute([$productId]);
        
        $docs = [
            'certificates' => 0,
            'manuals' => 0,
            'drawings' => 0
        ];
        
        while ($row = $stmt->fetch()) {
            $type = $row['type'] . 's'; // certificate -> certificates
            $docs[$type] = (int)$row['count'];
        }
        
        return $docs;
    }

    /**
     * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
     */
    private function getPopularityScore(int $productId): float {
        $stmt = $this->pdo->prepare("
            SELECT popularity_score
            FROM product_metrics
            WHERE product_id = ?
        ");
        $stmt->execute([$productId]);
        
        $score = $stmt->fetchColumn();
        return $score !== false ? (float)$score : 0.0;
    }

    /**
     * üî§ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    private function buildSearchText(array $product): string {
        $parts = [
            $product['name'],
            $product['external_id'],
            $product['sku'],
            $product['brand_name'],
            $product['series_name'],
            $product['description']
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!empty($product['categories']['names'])) {
            $parts = array_merge($parts, $product['categories']['names']);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        if (!empty($product['attributes'])) {
            foreach ($product['attributes'] as $attr) {
                $parts[] = $attr['value'];
            }
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        $text = implode(' ', array_filter($parts));
        return $this->normalizeText($text);
    }

    /**
     * üí° –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private function buildSuggestData(array $product): array {
        $suggestions = [];
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        if (!empty($product['name'])) {
            $suggestions[] = [
                'input' => [$product['name']],
                'weight' => 100
            ];
        }
        
        // –ê—Ä—Ç–∏–∫—É–ª
        if (!empty($product['external_id'])) {
            $suggestions[] = [
                'input' => [$product['external_id']],
                'weight' => 95
            ];
        }
        
        // SKU
        if (!empty($product['sku'])) {
            $suggestions[] = [
                'input' => [$product['sku']],
                'weight' => 90
            ];
        }
        
        // –ë—Ä–µ–Ω–¥
        if (!empty($product['brand_name'])) {
            $suggestions[] = [
                'input' => [$product['brand_name']],
                'weight' => 70
            ];
        }
        
        return $suggestions;
    }

    /**
     * üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞
     */
    private function switchAlias(): void {
        echo "üîÑ === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ê–õ–ò–ê–°–ê ===\n\n";
        
        try {
            $actions = [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–ª–∏–∞—Å—ã
            $hasExistingAlias = false;
            try {
                $aliases = $this->client->indices()->getAlias(['name' => 'products_current']);
                if (!empty($aliases)) {
                    $hasExistingAlias = true;
                    echo "üìã –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–ª–∏–∞—Å—ã:\n";
                    foreach (array_keys($aliases) as $oldIndex) {
                        echo "   - $oldIndex\n";
                        $actions[] = ['remove' => ['index' => $oldIndex, 'alias' => 'products_current']];
                    }
                }
            } catch (\Exception $e) {
                // –ê–ª–∏–∞—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                echo "‚ÑπÔ∏è –ê–ª–∏–∞—Å products_current –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)\n";
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–ª–∏–∞—Å
            $actions[] = ['add' => ['index' => $this->newIndexName, 'alias' => 'products_current']];
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
            $response = $this->client->indices()->updateAliases([
                'body' => ['actions' => $actions]
            ]);
            
            if ($response['acknowledged'] === true) {
                echo "‚úÖ –ê–ª–∏–∞—Å products_current —É—Å–ø–µ—à–Ω–æ " . 
                     ($hasExistingAlias ? "–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞" : "—Å–æ–∑–¥–∞–Ω –¥–ª—è") . 
                     " {$this->newIndexName}\n";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                sleep(1); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                $checkAliases = $this->client->indices()->getAlias(['name' => 'products_current']);
                if (isset($checkAliases[$this->newIndexName])) {
                    echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–ª–∏–∞—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å\n";
                } else {
                    echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∞–ª–∏–∞—Å —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞\n";
                }
            } else {
                throw new \Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–ª–∏–∞—Å");
            }
            
        } catch (\Exception $e) {
            echo "‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞–ª–∏–∞—Å–æ–º: " . $e->getMessage() . "\n";
            echo "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–∏–∞—Å–∞...\n";
            
            try {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞
                $this->client->indices()->putAlias([
                    'index' => $this->newIndexName,
                    'name' => 'products_current'
                ]);
                echo "‚úÖ –ê–ª–∏–∞—Å —Å–æ–∑–¥–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ\n";
            } catch (\Exception $e2) {
                echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e2->getMessage() . "\n";
                throw $e2;
            }
        }
        
        echo "\n";
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
     */
    private function cleanupOldIndices(): void {
        echo "üßπ === –û–ß–ò–°–¢–ö–ê ===\n\n";
        
        try {
            $indices = $this->client->indices()->get(['index' => 'products_*']);
            $allIndices = array_keys($indices);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            usort($allIndices, function($a, $b) {
                return strcmp($b, $a);
            });
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            $toDelete = array_slice($allIndices, MAX_OLD_INDICES + 1);
            
            foreach ($toDelete as $index) {
                try {
                    $this->client->indices()->delete(['index' => $index]);
                    echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å: $index\n";
                } catch (Exception $e) {
                    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å $index\n";
                }
            }
            
            if (empty($toDelete)) {
                echo "‚ÑπÔ∏è –°—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ—á–∏—Å—Ç–∫–∏\n";
            }
            
        } catch (Exception $e) {
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: " . $e->getMessage() . "\n";
        }
        
        echo "\n";
    }

    /**
     * üéâ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
     */
    private function showFinalReport(): void {
        $duration = microtime(true) - $this->startTime;
        $speed = $this->processed > 0 ? $this->processed / $duration : 0;
        
        echo "üéâ === –ì–û–¢–û–í–û! ===\n\n";
        echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {$this->processed}\n";
        echo "‚ùå –û—à–∏–±–æ–∫: {$this->errors}\n";
        echo "‚è±Ô∏è –í—Ä–µ–º—è: " . $this->formatTime($duration) . "\n";
        echo "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: " . round($speed) . " —Ç–æ–≤–∞—Ä–æ–≤/—Å–µ–∫\n";
        echo "üíæ –ü–∏–∫–æ–≤–∞—è –ø–∞–º—è—Ç—å: " . round(memory_get_peak_usage(true) / 1024 / 1024, 2) . " MB\n";
        echo "\n";
        echo "üîó –ò–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–ª–∏–∞—Å—É: products_current\n";
        echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!\n\n";
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

    private function normalizeText(?string $text): string {
        if (empty($text)) return '';
        
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        $text = preg_replace('/\s+/', ' ', $text);
        $text = trim($text);
        
        return $text;
    }

    private function formatDate(?string $date): string {
        if (empty($date)) return date('c');
        
        $timestamp = strtotime($date);
        return $timestamp ? date('c', $timestamp) : date('c');
    }
    
    /**
     * üß† –†–∞—Å—á–µ—Ç —É–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
     * 
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç
     * OpenSearch –ª—É—á—à–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * 
     * @param array $product –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
     * @return array –ú–∞—Å—Å–∏–≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    private function calculateSearchBoostFactors(array $product): array {
        // –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤)
        $factors = [
            'name_match' => 1.0,      // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            'brand_match' => 1.0,     // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±—Ä–µ–Ω–¥—É
            'code_match' => 1.0,      // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            'category_match' => 1.0   // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ];
        
        // üìà –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        $popularity = $this->getPopularityScore($product['product_id']);
        if ($popularity > 50) {
            $factors['name_match'] *= 1.2;  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã—à–µ
            echo "   üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä (score: $popularity), –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –Ω–∞–∑–≤–∞–Ω–∏—é\n";
        }
        
        // üñºÔ∏è –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ –≤—ã–≥–ª—è–¥—è—Ç –ª—É—á—à–µ)
        if (!empty($product['images'])) {
            $factors['name_match'] *= 1.1;
            $factors['brand_match'] *= 1.05;
        }
        
        // üì¶ –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (—Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –≤–∞–∂–Ω–µ–µ)
        if ($this->hasAnyStock($product['product_id'])) {
            $factors['name_match'] *= 1.15;
            $factors['code_match'] *= 1.15;
            $factors['brand_match'] *= 1.1;
        }
        
        // üèÜ –ë–æ–Ω—É—Å –∑–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±—Ä–µ–Ω–¥—ã (–∏–º –¥–æ–≤–µ—Ä—è—é—Ç –±–æ–ª—å—à–µ)
        $topBrands = [
            'schneider', 'legrand', 'abb', 'siemens', 'iek', 'tdm', 
            'eaton', 'hager', 'keaz', 'era'
        ];
        
        $brandLower = strtolower(trim($product['brand_name'] ?? ''));
        if (in_array($brandLower, $topBrands)) {
            $factors['brand_match'] *= 1.3;
            $factors['name_match'] *= 1.1;
        }
        
        // üìä –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ—Ç—É –æ–ø–∏—Å–∞–Ω–∏—è
        $descriptionLength = strlen($product['description'] ?? '');
        if ($descriptionLength > 100) {
            $factors['name_match'] *= 1.05; // –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        }
        
        // üîß –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ = –ª—É—á—à–µ —Ç–æ–≤–∞—Ä)
        $attributeCount = count($product['attributes'] ?? []);
        if ($attributeCount > 5) {
            $factors['name_match'] *= 1.08;
        }
        
        return $factors;
    }

    private function formatTime(float $seconds): string {
        if ($seconds < 60) {
            return round($seconds, 1) . 's';
        } elseif ($seconds < 3600) {
            return floor($seconds / 60) . 'm ' . round($seconds % 60) . 's';
        } else {
            return floor($seconds / 3600) . 'h ' . floor(($seconds % 3600) / 60) . 'm';
        }
    }

    private function updateProgress(int $current): void {
        $percent = round(($current / $this->totalProducts) * 100, 1);
        $bar = str_repeat('‚ñà', (int)($percent / 2)) . str_repeat('‚ñë', 50 - (int)($percent / 2));
        echo "\r[$bar] $percent% ({$this->processed}/{$this->totalProducts})";
    }

    private function initProgressBar(): void {
        echo "Progress: ";
    }

    private function handleBulkErrors(array $items): void {
        foreach ($items as $item) {
            if (isset($item['index']['error'])) {
                $this->errors++;
                error_log("Index error for ID {$item['index']['_id']}: " . json_encode($item['index']['error']));
            }
        }
    }

    private function handleError(Throwable $e): void {
        echo "\n\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê\n";
        echo "‚ùå " . $e->getMessage() . "\n";
        echo "üìç " . $e->getFile() . ":" . $e->getLine() . "\n\n";
        
        // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        if (!empty($this->newIndexName)) {
            try {
                $this->client->indices()->delete(['index' => $this->newIndexName]);
                echo "üßπ –ß–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É–¥–∞–ª–µ–Ω\n";
            } catch (Exception $cleanupError) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }
        }
        
        exit(1);
    }

    private function getHeader(): string {
        return "
================================================================================
üöÄ –ò–ù–î–ï–ö–°–ê–¢–û–† –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• OPENSEARCH v5.0
================================================================================
üìÖ " . date('Y-m-d H:i:s') . "
üñ•Ô∏è " . gethostname() . "
üêò PHP " . PHP_VERSION . "
üíæ Memory limit: " . ini_get('memory_limit') . "
================================================================================

";
    }

    /**
     * üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
     */
    private function getIndexConfiguration(): array {
        return [
            'settings' => [
                'number_of_shards' => 2, // –î–ª—è –º–∏–ª–ª–∏–æ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ª—É—á—à–µ 2 —à–∞—Ä–¥–∞
                'number_of_replicas' => 1,
                'index.max_ngram_diff' => 20,
                'index.max_result_window' => 50000,
                'index.refresh_interval' => '30s',
                
                'analysis' => [
                    'normalizer' => [
                        'lowercase' => [
                            'type' => 'custom',
                            'char_filter' => [],
                            'filter' => ['lowercase']
                        ]
                    ],
                    
                    'char_filter' => [
                        // üî• –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                        'ru_en_keyboard_mapping' => [
                            'type' => 'mapping',
                            'mappings' => [
                                'q=>–π', 'w=>—Ü', 'e=>—É', 'r=>–∫', 't=>–µ', 'y=>–Ω', 'u=>–≥', 'i=>—à', 'o=>—â', 'p=>–∑',
                                'a=>—Ñ', 's=>—ã', 'd=>–≤', 'f=>–∞', 'g=>–ø', 'h=>—Ä', 'j=>–æ', 'k=>–ª', 'l=>–¥',
                                'z=>—è', 'x=>—á', 'c=>—Å', 'v=>–º', 'b=>–∏', 'n=>—Ç', 'm=>—å',
                                // –ò –æ–±—Ä–∞—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
                                '–π=>q', '—Ü=>w', '—É=>e', '–∫=>r', '–µ=>t', '–Ω=>y', '–≥=>u', '—à=>i', '—â=>o', '–∑=>p',
                                '—Ñ=>a', '—ã=>s', '–≤=>d', '–∞=>f', '–ø=>g', '—Ä=>h', '–æ=>j', '–ª=>k', '–¥=>l',
                                '—è=>z', '—á=>x', '—Å=>c', '–º=>v', '–∏=>b', '—Ç=>n', '—å=>m'
                            ]
                        ],
                        
                        'code_normalizer' => [
                            'type' => 'pattern_replace',
                            'pattern' => '[\\s\\-\\._/,()]+',
                            'replacement' => ''
                        ],
                        
                        // –°–∫–ª–µ–∏–≤–∞–µ–º —á–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏: "16 –ê" -> "16–ê"
                        'unit_normalizer' => [
                            'type' => 'pattern_replace',
                            'pattern' => '(\\d+)\\s+([–∞-—è–ê-–ØA-Za-z]{1,3})\\b',
                            'replacement' => '$1$2'
                        ],
                        
                        'space_normalizer' => [
                            'type' => 'pattern_replace',
                            'pattern' => '\\s+',
                            'replacement' => ' '
                        ]
                    ],
                    
                    'tokenizer' => [
                        'edge_ngram_tokenizer' => [
                            'type' => 'edge_ngram',
                            'min_gram' => 2,
                            'max_gram' => 15,
                            'token_chars' => ['letter', 'digit']
                        ]
                    ],
                    
                    'filter' => [
                        'synonym_filter' => [
                            'type' => 'synonym',
                            'synonyms' => [
                                '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å,–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å,switch,—Å–≤–∏—Ç—á,–≤—ã–∫–ª,–≤—ã–∫–ª—é—á',
                                '—Ä–æ–∑–µ—Ç–∫–∞,—Ä–∞–∑—ä–µ–º,socket,–≥–Ω–µ–∑–¥–æ,—Ä–∞–∑—å–µ–º,—Ä–æ–∑–µ—Ç',
                                '–∫–∞–±–µ–ª—å,–ø—Ä–æ–≤–æ–¥,—à–Ω—É—Ä,cable,wire,–∫–∞–±–µ–ª,–∫–∞–±–ª',
                                '–∞–≤—Ç–æ–º–∞—Ç,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å,–∞–≤—Ç –≤—ã–∫–ª,mcb,–∞–≤—Ç–æ–º–∞—Ç –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å',
                                '—â–∏—Ç,—â–∏—Ç–æ–∫,—à–∫–∞—Ñ,–±–æ–∫—Å,panel,—â–∏—Ç–æ–≤–æ–µ',
                                '–ª–∞–º–ø–∞,–ª–∞–º–ø–æ—á–∫–∞,—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫,lamp,light,–æ—Å–≤–µ—â–µ–Ω–∏–µ',
                                // –ë—Ä–µ–Ω–¥—ã
                                '—à–Ω–∞–π–¥–µ—Ä,schneider,—à–Ω–µ–π–¥–µ—Ä,schneid=>schneider',
                                '–ª–µ–≥—Ä–∞–Ω–¥,legrand,–ª–µ–≥—Ä–∞–Ω=>legrand',
                                '–∏—ç–∫,iek,–∏–µ–∫=>iek',
                                // –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
                                '–∞,–∞–º–ø–µ—Ä,a,amp,ampere=>–∞',
                                '–≤,–≤–æ–ª—å—Ç,v,volt=>–≤',
                                '–≤—Ç,–≤–∞—Ç—Ç,w,watt=>–≤—Ç',
                                '–º–º,–º–∏–ª–ª–∏–º–µ—Ç—Ä,mm=>–º–º'
                            ]
                        ],
                        'russian_stemmer' => [
                            'type' => 'stemmer',
                            'language' => 'russian'
                        ],
                        'edge_ngram_filter' => [
                            'type' => 'edge_ngram',
                            'min_gram' => 2,
                            'max_gram' => 15
                        ]
                    ],
                    
                    'analyzer' => [
                        // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                        'text_analyzer' => [
                            'tokenizer' => 'standard',
                            'char_filter' => ['ru_en_keyboard_mapping', 'unit_normalizer', 'space_normalizer'],
                            'filter' => ['lowercase', 'synonym_filter', 'russian_stemmer']
                        ],
                        
                        // –î–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
                        'code_analyzer' => [
                            'tokenizer' => 'keyword',
                            'char_filter' => ['code_normalizer'],
                            'filter' => ['lowercase']
                        ],
                        
                        // –î–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                        'autocomplete_analyzer' => [
                            'tokenizer' => 'edge_ngram_tokenizer',
                            'char_filter' => ['ru_en_keyboard_mapping', 'space_normalizer'],
                            'filter' => ['lowercase']
                        ],
                        
                        // –î–ª—è –ø–æ–∏—Å–∫–∞ - –±–µ–∑ —Å—Ç–µ–º–º–∏–Ω–≥–∞, –Ω–æ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
                        'search_analyzer' => [
                            'tokenizer' => 'standard',
                            'char_filter' => ['ru_en_keyboard_mapping', 'unit_normalizer'],
                            'filter' => ['lowercase', 'synonym_filter']
                        ]
                    ]
                ]
            ],
            
            'mappings' => [
                'properties' => [
                    'product_id' => ['type' => 'long'],
                    
                    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                    'name' => [
                        'type' => 'text',
                        'analyzer' => 'text_analyzer',
                        'search_analyzer' => 'search_analyzer',
                        'fields' => [
                            'keyword' => ['type' => 'keyword'],
                            'autocomplete' => [
                                'type' => 'text',
                                'analyzer' => 'autocomplete_analyzer',
                                'search_analyzer' => 'search_analyzer'
                            ],
                            'exact' => [
                                'type' => 'text',
                                'analyzer' => 'keyword',
                                'normalizer' => 'lowercase'
                            ]
                        ]
                    ],
                    
                    // –ê—Ä—Ç–∏–∫—É–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    'external_id' => [
                        'type' => 'text',
                        'analyzer' => 'code_analyzer',
                        'fields' => [
                            'keyword' => ['type' => 'keyword'],
                            'prefix' => [
                                'type' => 'text',
                                'analyzer' => 'autocomplete_analyzer'
                            ]
                        ]
                    ],
                    
                    'sku' => [
                        'type' => 'text',
                        'analyzer' => 'code_analyzer',
                        'fields' => [
                            'keyword' => ['type' => 'keyword'],
                            'prefix' => [
                                'type' => 'text',
                                'analyzer' => 'autocomplete_analyzer'
                            ]
                        ]
                    ],
                    
                    'description' => [
                        'type' => 'text',
                        'analyzer' => 'text_analyzer',
                        'search_analyzer' => 'search_analyzer'
                    ],
                    
                    'brand_name' => [
                        'type' => 'text',
                        'analyzer' => 'text_analyzer',
                        'search_analyzer' => 'search_analyzer',
                        'fields' => [
                            'keyword' => ['type' => 'keyword'],
                            'exact' => ['type' => 'keyword', 'normalizer' => 'lowercase']
                        ]
                    ],
                    
                    'search_text' => [
                        'type' => 'text',
                        'analyzer' => 'text_analyzer',
                        'search_analyzer' => 'search_analyzer'
                    ],
                    
                    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ —É –≤–∞—Å...
                    'unit' => ['type' => 'keyword'],
                    'min_sale' => ['type' => 'integer'],
                    'weight' => ['type' => 'float'],
                    'brand_id' => ['type' => 'integer'],
                    'series_id' => ['type' => 'integer'],
                    'series_name' => ['type' => 'text', 'analyzer' => 'text_analyzer'],
                    'categories' => ['type' => 'text', 'analyzer' => 'text_analyzer'],
                    'category_ids' => ['type' => 'integer'],
                    'images' => ['type' => 'keyword'],
                    'popularity_score' => ['type' => 'float'],
                    'total_stock' => ['type' => 'integer'],
                    'has_stock' => ['type' => 'boolean'],
                    'created_at' => ['type' => 'date'],
                    'updated_at' => ['type' => 'date'],
                    
                    'attributes' => [
                        'type' => 'nested',
                        'properties' => [
                            'name' => ['type' => 'keyword'],
                            'value' => [
                                'type' => 'text',
                                'analyzer' => 'text_analyzer',
                                'fields' => ['keyword' => ['type' => 'keyword']]
                            ],
                            'unit' => ['type' => 'keyword']
                        ]
                    ],
                    
                    'suggest' => [
                        'type' => 'completion',
                        'analyzer' => 'autocomplete_analyzer',
                        'search_analyzer' => 'search_analyzer',
                        'max_input_length' => 50
                    ]
                ]
            ]
        ];
    }
}

// üöÄ –ó–ê–ü–£–°–ö
try {
    $indexer = new StaticProductIndexer();
    $indexer->run();
    exit(0);
} catch (Exception $e) {
    echo "\nüí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
    exit(1);
}

/var/www/www-root/data/site/vdestor.ru/opensearch_mappings/products_v5.json
{
  "settings": {
    "number_of_shards": 3,
    "number_of_replicas": 1,
    "index.max_ngram_diff": 25,
    "index.max_result_window": 100000,
    "index.refresh_interval": "30s",
    "index.number_of_routing_shards": 3,
    
    "index.mapping.total_fields.limit": 3000,
    "index.mapping.depth.limit": 25,
    "index.mapping.nested_fields.limit": 150,
    
    "analysis": {
      "normalizer": {
        "lowercase_normalizer": {
          "type": "custom",
          "char_filter": [],
          "filter": ["lowercase", "asciifolding"]
        },
        
        "code_normalizer": {
          "type": "custom", 
          "char_filter": ["spaces_and_symbols"],
          "filter": ["lowercase"]
        }
      },
      
      "char_filter": {
        "keyboard_layout_mapper": {
          "type": "mapping",
          "mappings": [
            "q=>–π", "w=>—Ü", "e=>—É", "r=>–∫", "t=>–µ", "y=>–Ω", "u=>–≥", "i=>—à", "o=>—â", "p=>–∑",
            "[=>—Ö", "]=>—ä", "a=>—Ñ", "s=>—ã", "d=>–≤", "f=>–∞", "g=>–ø", "h=>—Ä", "j=>–æ", "k=>–ª", 
            "l=>–¥", ";=>–∂", "'=>—ç", "z=>—è", "x=>—á", "c=>—Å", "v=>–º", "b=>–∏", "n=>—Ç", "m=>—å",
            ",=>–±", ".=>—é", "/=>.", "\\=>\\",
            
            "–π=>q", "—Ü=>w", "—É=>e", "–∫=>r", "–µ=>t", "–Ω=>y", "–≥=>u", "—à=>i", "—â=>o", "–∑=>p",
            "—Ö=>[", "—ä=>]", "—Ñ=>a", "—ã=>s", "–≤=>d", "–∞=>f", "–ø=>g", "—Ä=>h", "–æ=>j", "–ª=>k",
            "–¥=>l", "–∂=>;", "—ç=>'", "—è=>z", "—á=>x", "—Å=>c", "–º=>v", "–∏=>b", "—Ç=>n", "—å=>m",
            "–±=>,", "—é=>.", ".=>/"
          ]
        },
        
        "unit_combiner": {
          "type": "pattern_replace",
          "pattern": "(\\d+)\\s*(–∞|–∞–º–ø–µ—Ä|amp|a|–≤|–≤–æ–ª—å—Ç|volt|v|–≤—Ç|–≤–∞—Ç—Ç|watt|w|–º–º|mm|—Å–º|cm|–º|m)\\b",
          "replacement": "$1$2",
          "flags": "CASE_INSENSITIVE"
        },
        
        "spaces_and_symbols": {
          "type": "pattern_replace",
          "pattern": "[\\s\\-\\._/\\\\,()\\[\\]]+",
          "replacement": ""
        },
        
        "space_normalizer": {
          "type": "pattern_replace",
          "pattern": "\\s+",
          "replacement": " "
        },
        
        "brand_normalizer": {
          "type": "mapping",
          "mappings": [
            "—à–Ω–∞–π–¥–µ—Ä=>schneider", "—à–Ω–µ–π–¥–µ—Ä=>schneider", "schneid=>schneider",
            "–ª–µ–≥—Ä–∞–Ω–¥=>legrand", "–ª–µ–≥—Ä–∞–Ω=>legrand", "–ª–∏–≥—Ä–∞–Ω–¥=>legrand",
            "–∏—ç–∫=>iek", "–∏–µ–∫=>iek", "aiek=>iek",
            "—Ç–¥–º=>tdm", "—Ç–¥–º—ç–ª–µ–∫—Ç—Ä–∏–∫=>tdm",
            "—ç—Ä–∞=>era", "–µ—Ä–∞=>era",
            "–∫—ç–∞–∑=>keaz", "–∫–µ–∞–∑=>keaz"
          ]
        }
      },
      
      "tokenizer": {
        "smart_edge_ngram": {
          "type": "edge_ngram",
          "min_gram": 2,
          "max_gram": 20,
          "token_chars": ["letter", "digit"]
        },
        
        "flexible_keyword": {
          "type": "pattern",
          "pattern": "[\\s\\-\\._/\\\\,()\\[\\]]+",
          "flags": "CASE_INSENSITIVE"
        }
      },
      
      "filter": {
        "electrical_synonyms": {
          "type": "synonym",
          "synonyms": [
            "–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å,–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å,switch,—Å–≤–∏—Ç—á,–≤—ã–∫–ª,–≤—ã–∫–ª—é—á,–∫–Ω–æ–ø–∫–∞=>–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å",
            "–∞–≤—Ç–æ–º–∞—Ç,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å,–∞–≤—Ç –≤—ã–∫–ª,mcb,–∞–≤—Ç–æ–º–∞—Ç –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π=>–∞–≤—Ç–æ–º–∞—Ç",
            "—É–∑–æ,—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—â–∏—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è,rcd,–¥–∏—Ñ–∞–≤—Ç–æ–º–∞—Ç=>—É–∑–æ",
            "—Ä–æ–∑–µ—Ç–∫–∞,—Ä–∞–∑—ä–µ–º,socket,–≥–Ω–µ–∑–¥–æ,—Ä–∞–∑—å–µ–º,—Ä–æ–∑–µ—Ç,—à—Ç–µ–ø—Å–µ–ª—å=>—Ä–æ–∑–µ—Ç–∫–∞",
            "–∫–∞–±–µ–ª—å,–ø—Ä–æ–≤–æ–¥,—à–Ω—É—Ä,cable,wire,–∫–∞–±–µ–ª,–∫–∞–±–ª,–ø—Ä–æ–≤–æ–¥–∞=>–∫–∞–±–µ–ª—å",
            "—â–∏—Ç,—â–∏—Ç–æ–∫,—à–∫–∞—Ñ,–±–æ–∫—Å,panel,—â–∏—Ç–æ–≤–æ–µ,—ç–ª–µ–∫—Ç—Ä–æ—â–∏—Ç,—Ä–∞—Å–ø—Ä–µ–¥—â–∏—Ç=>—â–∏—Ç",
            "–ª–∞–º–ø–∞,–ª–∞–º–ø–æ—á–∫–∞,—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫,lamp,light,–æ—Å–≤–µ—â–µ–Ω–∏–µ,–ª–µ–¥,led=>–ª–∞–º–ø–∞",
            "–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä,–ø—É—Å–∫–∞—Ç–µ–ª—å,—Ä–µ–ª–µ,relay,–∫–æ–Ω—Ç–∞–∫—Ç—Ä=>–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä",
            "—Å—á–µ—Ç—á–∏–∫,—ç–ª–µ–∫—Ç—Ä–æ—Å—á–µ—Ç—á–∏–∫,meter,—Å—á—ë—Ç—á–∏–∫=>—Å—á–µ—Ç—á–∏–∫",
            "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä,—Ç—Ä,transformer,—Ç—Ä–∞–Ω—Å=>—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä",
            "–∫–ª–µ–º–º–Ω–∏–∫,–∫–ª–µ–º–º–∞,terminal,–∑–∞–∂–∏–º=>–∫–ª–µ–º–º–Ω–∏–∫",
            "din,–¥–∏–Ω,–¥–∏–Ω —Ä–µ–π–∫–∞,din rail=>–¥–∏–Ω—Ä–µ–π–∫–∞",
            
            "–∞,–∞–º–ø–µ—Ä,amp,ampere=>–∞",
            "–≤,–≤–æ–ª—å—Ç,volt,v=>–≤", 
            "–≤—Ç,–≤–∞—Ç—Ç,watt,w=>–≤—Ç",
            "–º–º,–º–∏–ª–ª–∏–º–µ—Ç—Ä,mm=>–º–º",
            "—Å–º,—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä,cm=>—Å–º",
            "–º,–º–µ—Ç—Ä,meter=>–º",
            "–∫–≤—Ç,–∫–∏–ª–æ–≤–∞—Ç—Ç,kw,–∫–≤–≤–∞—Ç—Ç=>–∫–≤—Ç",
            "–∫–≤,–∫–∏–ª–æ–≤–æ–ª—å—Ç,kv=>–∫–≤",
            
            "–æ–¥–Ω–æ–ø–æ–ª—é—Å–Ω—ã–π,1–ø,1p,1-–ø–æ–ª—é—Å–Ω—ã–π=>1–ø",
            "–¥–≤—É—Ö–ø–æ–ª—é—Å–Ω—ã–π,2–ø,2p,2-–ø–æ–ª—é—Å–Ω—ã–π=>2–ø", 
            "—Ç—Ä–µ—Ö–ø–æ–ª—é—Å–Ω—ã–π,3–ø,3p,3-–ø–æ–ª—é—Å–Ω—ã–π=>3–ø",
            "—á–µ—Ç—ã—Ä–µ—Ö–ø–æ–ª—é—Å–Ω—ã–π,4–ø,4p,4-–ø–æ–ª—é—Å–Ω—ã–π=>4–ø",
            
            "–±–µ–ª—ã–π,–±–µ–ª–∞—è,–±–µ–ª–æ–µ=>–±–µ–ª—ã–π",
            "—á–µ—Ä–Ω—ã–π,—á–µ—Ä–Ω–∞—è,—á–µ—Ä–Ω–æ–µ=>—á–µ—Ä–Ω—ã–π",
            "—Å–µ—Ä—ã–π,—Å–µ—Ä–∞—è,—Å–µ—Ä–æ–µ=>—Å–µ—Ä—ã–π"
          ]
        },
        
        "brand_synonyms": {
          "type": "synonym", 
          "synonyms": [
            "schneider,—à–Ω–∞–π–¥–µ—Ä,—à–Ω–µ–π–¥–µ—Ä,schneid=>schneider",
            "legrand,–ª–µ–≥—Ä–∞–Ω–¥,–ª–µ–≥—Ä–∞–Ω,–ª–∏–≥—Ä–∞–Ω–¥=>legrand",
            "iek,–∏—ç–∫,–∏–µ–∫,aiek=>iek",
            "abb,–∞–±–±,—ç–±–±=>abb",
            "tdm,—Ç–¥–º,—Ç–¥–º—ç–ª–µ–∫—Ç—Ä–∏–∫=>tdm",
            "era,—ç—Ä–∞,–µ—Ä–∞=>era",
            "keaz,–∫—ç–∞–∑,–∫–µ–∞–∑=>keaz",
            "eaton,–∏—Ç–æ–Ω,–µ–∞—Ç–æ–Ω=>eaton",
            "siemens,—Å–∏–º–µ–Ω—Å,–∑–∏–º–µ–Ω—Å=>siemens",
            "hager,—Ö–∞–≥–µ—Ä,—Ö–µ–π–≥–µ—Ä=>hager"
          ]
        },
        
        "russian_stemmer": {
          "type": "stemmer",
          "language": "russian"
        },
        
        "edge_ngram_filter": {
          "type": "edge_ngram",
          "min_gram": 2,
          "max_gram": 15
        },
        
        "shingle_filter": {
          "type": "shingle",
          "min_shingle_size": 2,
          "max_shingle_size": 3,
          "output_unigrams": true
        }
      },
      
      "analyzer": {
        "smart_search_analyzer": {
          "tokenizer": "standard",
          "char_filter": [
            "keyboard_layout_mapper",
            "brand_normalizer", 
            "unit_combiner",
            "space_normalizer"
          ],
          "filter": [
            "lowercase",
            "brand_synonyms",
            "electrical_synonyms",
            "russian_stemmer",
            "shingle_filter"
          ]
        },
        
        "smart_query_analyzer": {
          "tokenizer": "standard",
          "char_filter": [
            "keyboard_layout_mapper",
            "brand_normalizer",
            "unit_combiner"
          ],
          "filter": [
            "lowercase", 
            "brand_synonyms",
            "electrical_synonyms"
          ]
        },
        
        "code_analyzer": {
          "tokenizer": "flexible_keyword",
          "char_filter": ["spaces_and_symbols"],
          "filter": ["lowercase"]
        },
        
        "code_prefix_analyzer": {
          "tokenizer": "smart_edge_ngram",
          "char_filter": ["spaces_and_symbols"],
          "filter": ["lowercase"]
        },
        
        "autocomplete_analyzer": {
          "tokenizer": "smart_edge_ngram",
          "char_filter": [
            "keyboard_layout_mapper",
            "brand_normalizer",
            "space_normalizer"
          ],
          "filter": ["lowercase", "brand_synonyms"]
        },
        
        "exact_match_analyzer": {
          "tokenizer": "keyword",
          "char_filter": ["space_normalizer"],
          "filter": ["lowercase", "asciifolding"]
        },
        
        "phonetic_analyzer": {
          "tokenizer": "standard",
          "char_filter": ["keyboard_layout_mapper"],
          "filter": [
            "lowercase",
            "brand_synonyms", 
            "electrical_synonyms",
            "russian_stemmer"
          ]
        }
      }
    }
  },
  
  "mappings": {
    "properties": {
      "product_id": {
        "type": "long"
      },
      
      "name": {
        "type": "text",
        "analyzer": "smart_search_analyzer",
        "search_analyzer": "smart_query_analyzer",
        "boost": 10,
        "fields": {
          "exact": {
            "type": "text",
            "analyzer": "exact_match_analyzer",
            "boost": 25
          },
          "autocomplete": {
            "type": "text", 
            "analyzer": "autocomplete_analyzer",
            "search_analyzer": "smart_query_analyzer"
          },
          "phonetic": {
            "type": "text",
            "analyzer": "phonetic_analyzer",
            "boost": 3
          },
          "keyword": {
            "type": "keyword",
            "normalizer": "lowercase_normalizer"
          }
        }
      },
      
      "external_id": {
        "type": "text",
        "analyzer": "code_analyzer",
        "boost": 20,
        "fields": {
          "prefix": {
            "type": "text",
            "analyzer": "code_prefix_analyzer",
            "boost": 15
          },
          "keyword": {
            "type": "keyword",
            "normalizer": "code_normalizer"
          }
        }
      },
      
      "sku": {
        "type": "text",
        "analyzer": "code_analyzer", 
        "boost": 18,
        "fields": {
          "prefix": {
            "type": "text",
            "analyzer": "code_prefix_analyzer",
            "boost": 12
          },
          "keyword": {
            "type": "keyword",
            "normalizer": "code_normalizer"
          }
        }
      },
      
      "description": {
        "type": "text",
        "analyzer": "smart_search_analyzer",
        "search_analyzer": "smart_query_analyzer",
        "boost": 2
      },
      
      "brand_name": {
        "type": "text",
        "analyzer": "smart_search_analyzer", 
        "search_analyzer": "smart_query_analyzer",
        "boost": 12,
        "fields": {
          "exact": {
            "type": "text",
            "analyzer": "exact_match_analyzer",
            "boost": 20
          },
          "keyword": {
            "type": "keyword",
            "normalizer": "lowercase_normalizer"
          }
        }
      },
      
      "series_name": {
        "type": "text",
        "analyzer": "smart_search_analyzer",
        "search_analyzer": "smart_query_analyzer", 
        "boost": 8,
        "fields": {
          "exact": {
            "type": "text",
            "analyzer": "exact_match_analyzer",
            "boost": 15
          }
        }
      },
      
      "categories": {
        "type": "text",
        "analyzer": "smart_search_analyzer",
        "search_analyzer": "smart_query_analyzer",
        "boost": 6
      },
      
      "search_text": {
        "type": "text",
        "analyzer": "smart_search_analyzer",
        "search_analyzer": "smart_query_analyzer",
        "boost": 5
      },
      
      "attributes": {
        "type": "nested",
        "properties": {
          "name": {
            "type": "text",
            "analyzer": "smart_search_analyzer",
            "fields": {
              "keyword": {
                "type": "keyword"
              }
            }
          },
          "value": {
            "type": "text", 
            "analyzer": "smart_search_analyzer",
            "search_analyzer": "smart_query_analyzer",
            "fields": {
              "keyword": {
                "type": "keyword"
              },
              "numeric": {
                "type": "float",
                "ignore_malformed": true
              }
            }
          },
          "unit": {
            "type": "keyword"
          }
        }
      },
      
      "numeric_props": {
        "type": "nested",
        "properties": {
          "name": {
            "type": "keyword"
          },
          "value": {
            "type": "float"
          },
          "unit": {
            "type": "keyword"
          }
        }
      },
      
      "unit": {
        "type": "keyword"
      },
      
      "brand_id": {
        "type": "integer"
      },
      
      "series_id": {
        "type": "integer"
      },
      
      "category_ids": {
        "type": "integer"
      },
      
      "min_sale": {
        "type": "integer"
      },
      
      "weight": {
        "type": "float"
      },
      
      "dimensions": {
        "type": "text",
        "analyzer": "smart_search_analyzer"
      },
      
      "images": {
        "type": "keyword",
        "index": false
      },
      
      "documents": {
        "type": "object",
        "properties": {
          "certificates": {
            "type": "integer"
          },
          "manuals": {
            "type": "integer"
          },
          "drawings": {
            "type": "integer"
          }
        }
      },
      
      "popularity_score": {
        "type": "float"
      },
      
      "total_stock": {
        "type": "integer"
      },
      
      "cities_available": {
        "type": "integer"
      },
      
      "has_stock": {
        "type": "boolean"
      },
      
      "has_images": {
        "type": "boolean"
      },
      
      "has_description": {
        "type": "boolean"
      },
      
      "created_at": {
        "type": "date"
      },
      
      "updated_at": {
        "type": "date"
      },
      
      "suggest": {
        "type": "completion",
        "analyzer": "autocomplete_analyzer",
        "search_analyzer": "smart_query_analyzer",
        "max_input_length": 100,
        "contexts": [
          {
            "name": "category_context",
            "type": "category"
          },
          {
            "name": "brand_context", 
            "type": "category"
          }
        ]
      },
      
      "search_boost_factors": {
        "type": "object",
        "properties": {
          "name_match": {
            "type": "float"
          },
          "brand_match": {
            "type": "float"
          },
          "code_match": {
            "type": "float"
          },
          "category_match": {
            "type": "float"
          }
        }
      }
    }
  }
}


